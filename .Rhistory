?source
`%>%`
library(dplyr)
`%>%`
library("dplyr", lib.loc="~/R/win-library/3.5")
detach("package:dplyr", unload=TRUE)
`%>%`
library("magrittr", lib.loc="F:/R-3.5.1/library")
`%>%`
shiny::runApp()
glb.ships.data <- data.table::fread(
"data/ships.csv",
sep = ",",
encoding = "UTF-8"
)
glb.ships.data %>% head()
runApp()
runApp()
glb.ships.data %>% head()
glb.ships.data[, DATETIME_TIME := as.POSIXct(DATETIME, format = "%Y-%m-%d %H:%M:%S")]
glb.ships.data %>% head()
data.table::setorderv(glb.ships.data, cols = 'DATETIME_TIME')
glb.ships.data %>% head()
data.table::setorderv(glb.ships.data, cols = 'DATETIME_TIME', by = SHIPNAME)
?setorderv
data.table::setorderv(glb.ships.data, cols = c("SHIPNAME", 'DATETIME_TIME'))
glb.ships.data %>% head()
# make sure that SHIPNAME is ok column to be used as identifier
length(unique(glb.ships.data$SHIPNAME)) == length(unique(glb.ships.data$SHIP_ID))
length(unique(glb.ships.data$SHIPNAME))
length(unique(glb.ships.data$SHIP_ID))
modifyShipName <- function() {
browser()
}
mapply(modifyShipName(name), unique(glb.ships.data$SHIPNAME))
modifyShipName <- function(name) {
browser()
}
mapply(modifyShipName(name), unique(glb.ships.data$SHIPNAME))
unique.ids <- c("1", "2")
seq_along(unique.ids)
# usually we want to keep it the same
glb.ships.data[, SHIPNAME_ID := SHIPNAME]
glb.ships.data %>% head()
unique(glb.ships.data$SHIPNAME)
name <- unique(glb.ships.data$SHIPNAME)[1]
name
# get unique ids for given name (we hoped that it was only one)
unique.ids <- unique(glb.ships.data[SHIPNAME == name, SHIP_ID])
unique.ids
length(unique.ids)
for(name in unique(glb.ships.data$SHIPNAME)) {
# get unique ids for given name (we hoped that it was only one)
unique.ids <- unique(glb.ships.data[SHIPNAME == name, SHIP_ID])
if(length(unique.ids) > 1) {
browser()
# keep the first occurance the same
for(i in 2:length(unique.ids)) {
glb.ships.data[SHIPNAME == name & SHIP_ID == unique.ids[i], SHIPNAME_ID := paste0(SHIPNAME, "_", SHIP_ID)]
}
}
}
name
unique.ids
name
glb.ships.data <- data.table::fread(
"data/ships.csv",
sep = ",",
encoding = "UTF-8"
)
# format date column into actual date in order to sort by it
glb.ships.data[, DATETIME_TIME := as.POSIXct(DATETIME, format = "%Y-%m-%d %H:%M:%S")]
# make sure that SHIPNAME is ok column to be used as identifier
length(unique(glb.ships.data$SHIPNAME)) == length(unique(glb.ships.data$SHIP_ID))
glb.ships.data[, SHIPNAME_ID := SHIPNAME]
for(name in unique(glb.ships.data$SHIPNAME)) {
# get unique ids for given name (we hoped that it was only one)
unique.ids <- unique(glb.ships.data[SHIPNAME == name, SHIP_ID])
if(length(unique.ids) > 1) {
# keep the first occurance the same
for(i in 2:length(unique.ids)) {
glb.ships.data[SHIPNAME == name & SHIP_ID == unique.ids[i], SHIPNAME_ID := paste0(SHIPNAME, "_", SHIP_ID)]
}
}
}
# make sure that SHIPNAME is ok column to be used as identifier
length(unique(glb.ships.data$SHIPNAME)) == length(unique(glb.ships.data$SHIP_ID))
glb.ships.data %>% head()
length(unique(glb.ships.data$SHIPNAME_ID)) == length(unique(glb.ships.data$SHIP_ID))
length(unique(glb.ships.data$SHIPNAME_ID))
length(unique(glb.ships.data$SHIP_ID))
length(unique(glb.ships.data$SHIPNAME))
glb.ships.data[SHIPNAME == "ALANA",]
unique.types <- unique(glb.ships.data[SHIPNAME == name, ship_type])
unique.types
unique.ids
name<-"ALANA"
# get unique ids for given name (we hoped that it was only one)
unique.ids <- unique(glb.ships.data[SHIPNAME == name, SHIP_ID])
unique.ids
unique.types <- unique(glb.ships.data[SHIPNAME == name, ship_type])
unique.types
# usually we want to keep it the same
glb.ships.data[, SHIPNAME_ID := SHIPNAME]
length(unique(glb.ships.data$SHIPNAME_ID))
for(name in unique(glb.ships.data$SHIPNAME)) {
# get unique ids for given name (we hoped that it was only one)
unique.ids <- unique(glb.ships.data[SHIPNAME == name, SHIP_ID])
if(length(unique.ids) > 1) {
unique.types <- unique(glb.ships.data[SHIPNAME == name, ship_type])
# if the number of unique types is the same as number of unique ids we assume that names are unique inside the type
# what is enough for our app, as we select data based on those two fields
if(length(unique.types) < length(unique.ids)) {
# keep the first occurance the same
for(i in 2:length(unique.ids)) {
glb.ships.data[SHIPNAME == name & SHIP_ID == unique.ids[i], SHIPNAME_ID := paste0(SHIPNAME, "_", i)]
}
} else if(length(unique.types) > length(unique.ids)) {
warning(sprintf("There is sth wrong with number of types for %s", name))
}
}
}
length(unique(glb.ships.data$SHIPNAME_ID))
length(unique(glb.ships.data$SHIP_ID))
glb.ships.data %>% head()
glb.ships.data[SHIPNAME != SHIPNAME_ID, ] %>% head()
glb.ships.data[SHIPNAME == "AMANDA", ]
unique(glb.ships.data$SHIPNAME_ID)
unique(glb.ships.data$SHIPNAME_ID) %>% sort()
glb.ships.data[SHIPNAME != SHIPNAME_ID, SHIPNAME] %>% unique()
glb.ships.data %>% head()
# get the sorted data by name and time
data.table::setorderv(glb.ships.data, cols = c("SHIP_ID", 'DATETIME_TIME'))
glb.ships.data %>% head()
a<-c(1,2,3)
diff(a)
# the time between observations seems to be about 2 minutes, but I've noticed also some exceptions. Let's examine it:
glb.ships.data[, TIME_DIFF := c(0, diff(DATETIME_TIME)), by = SHIP_ID]
glb.ships.data %>% head()
library(magrittr)
glb.ships.data %>% head()
glb.ships.data %>% head(20)
glb.ships.data %>% head(100)
summary(glb.ships.data$TIME_DIFF)
glb.ships.data[TIME_DIFF == 0,]
glb.ships.data[TIME_DIFF > 130,]
glb.ships.data[SHIPNAME == "KONYA",]
glb.ships.data[SHIPNAME == "KONYA" & TIME_DIFF > 120,]
glb.ships.data[TIME_DIFF == 567120.0,]
glb.ships.data[SHIPNAME == "HANNA",]
# Finally let's remove the redundant colums to make dataset smaller:
columns.to.keep <- c("LAT", "LON", "SHIPNAME_ID", "SHIP_ID", "ship_type", "is_parked", "DATETIME_TIME")
# Finally let's remove the redundant colums to make dataset smaller:
columns.to.keep <- c("LAT", "LON", "SHIPNAME_ID", "SHIP_ID", "ship_type", "is_parked", "DATETIME_TIME")
columns.to.remove <- setdiff(colnames(glb.ships.data), columns.to.keep)
columns.to.remove
glb.ships.data[, (columns.to.remove) := NULL]
glb.ships.data
# and lets rename columns a little bit to make it consistent:
data.table::setcolorder(glb.ships.data, columns.to.keep)
glb.ships.data
names(glb.ships.data) <- c("LAT", "LON", "SHIPNAME", "SHIP_ID", "SHIP_TYPE", "IS_PARKED", "DATETIME")
glb.ships.data
# order again just to be sure:
data.table::setorderv(glb.ships.data, cols = c("SHIP_ID", 'DATETIME'))
glb.ships.data
# and finally we save the new dataset to the csv again. To recapture we've:
# 1) make sure that the data is ordered by the increasing time for each SHIP_ID
# 2) make sure that the names can work as id inside selected ship type
# 3) checked that there are some outliers in the data in time differences between observations (but nothing was done with it, it might be expected result)
# 4) data was trunckated to save space
write.csv2(glb.ships.data, "data/ships_organised.csv")
names(glb.ships.data) <- c("LAT", "LON", "SHIP_NAME", "SHIP_ID", "SHIP_TYPE", "IS_PARKED", "DATETIME")
glb.ships.data
# and finally we save the new dataset to the csv again. To recapture we've:
# 1) make sure that the data is ordered by the increasing time for each SHIP_ID
# 2) make sure that the names can work as id inside selected ship type
# 3) checked that there are some outliers in the data in time differences between observations (but nothing was done with it, it might be expected result)
# 4) data was trunckated to save space and load app quicker
write.csv2(glb.ships.data, "data/ships_organised.csv")
shiny::runApp()
source('~/GitHub/shipsDubelApp/R/prepare-data.R', echo=TRUE)
runApp()
glb.ships.data <- data.table::fread(
"data/ships.csv",
sep = ",",
encoding = "UTF-8"
)
# format date column into actual date in order to sort by it
glb.ships.data[, DATETIME_TIME := as.POSIXct(DATETIME, format = "%Y-%m-%d %H:%M:%S")]
glb.ships.data[, SHIPNAME_ID := SHIPNAME]
# for loop is efficient enough for this problem
for(name in unique(glb.ships.data$SHIPNAME)) {
# get unique ids for given name (we hoped that it was only one)
unique.ids <- unique(glb.ships.data[SHIPNAME == name, SHIP_ID])
if(length(unique.ids) > 1) {
unique.types <- unique(glb.ships.data[SHIPNAME == name, ship_type])
# if the number of unique types is the same as number of unique ids we assume that names are unique inside the type
# what is enough for our app, as we select data based on those two fields
if(length(unique.types) < length(unique.ids)) {
# keep the first occurance the same
for(i in 2:length(unique.ids)) {
glb.ships.data[SHIPNAME == name & SHIP_ID == unique.ids[i], SHIPNAME_ID := paste0(SHIPNAME, "_", i)]
}
} else if(length(unique.types) > length(unique.ids)) {
warning(sprintf("There is sth wrong with number of types for %s", name))
}
}
}
# get the sorted data by name and time
data.table::setorderv(glb.ships.data, cols = c("SHIP_ID", 'DATETIME_TIME'))
# the time between observations seems to be about 2 minutes, but I've noticed also some exceptions. Let's examine it:
glb.ships.data[, TIME_DIFF := c(0, diff(DATETIME_TIME)), by = SHIP_ID]
columns.to.keep <- c("LAT", "LON", "SHIPNAME_ID", "SHIP_ID", "ship_type", "is_parked", "DATETIME_TIME")
columns.to.remove <- setdiff(colnames(glb.ships.data), columns.to.keep)
glb.ships.data[, (columns.to.remove) := NULL]
# and lets rename columns a little bit to make it consistent:
data.table::setcolorder(glb.ships.data, columns.to.keep)
names(glb.ships.data) <- c("LAT", "LON", "SHIP_NAME", "SHIP_ID", "SHIP_TYPE", "IS_PARKED", "DATETIME")
# order again just to be sure:
data.table::setorderv(glb.ships.data, cols = c("SHIP_ID", 'DATETIME'))
?write.csv2
# and finally we save the new dataset to the csv again. To recapture we've:
# 1) make sure that the data is ordered by the increasing time for each SHIP_ID
# 2) make sure that the names can work as id inside selected ship type
# 3) checked that there are some outliers in the data in time differences between observations (but nothing was done with it, it might be expected result)
# 4) data was trunckated to save space and load app quicker
write.csv(glb.ships.data, "data/ships_organised.csv")
runApp()
runApp()
runApp()
runApp()
runApp()
glb.ships.data <- data.table::fread(
"data/ships_organised.csv",
sep = ",",
encoding = "UTF-8"
)
glb.ships.data
glb.ships.data$SHIP_TYPE %>% class()
